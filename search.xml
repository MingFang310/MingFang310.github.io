<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java学习笔记4-java方法</title>
      <link href="/2021/07/13/java-xue-xi-bi-ji-4-java-fang-fa/"/>
      <url>/2021/07/13/java-xue-xi-bi-ji-4-java-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>自用的学习笔记，若有错误欢迎指出。</p><h2 id="java方法"><a href="#java方法" class="headerlink" title="java方法"></a>java方法</h2><ul><li>java方法是语句的集合，它们在一起执行一个功能。<ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或者对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ul></li><li>设计方法的原则：方法本意是功能块，就是实现某个功能的语句块集合。我们设计方法的时候，最好保持方法的原子性。<strong>就是一个方法只能完成一个功能，这样利于我们后期的扩展。</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//main方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//实际参数：实际上传递给方法的参数</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//参数a &amp; b 为形式参数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><p>java的方法类似于其他语言的函数，是一<strong>段用来完成特定功能的代码片段</strong>。一般情况下，定义一个方法包含一下语法：</p><ul><li><strong>方法包含一个方法头和一个方法体</strong>。下面是一个方法的所有部分：<ul><li><strong>修饰符</strong>：修饰符，这是可选的，目的是告诉编辑器如何调用该方法。定义了该方法的访问类型。</li><li><strong>返回值类型</strong>：方法可能会返回值。<code>returnValueType</code> 是方法返回值的数据类型。有些方法执行所需的操作，但是没有返回值。在这种情况下，<code>returnValueType</code>是关键字void。</li><li><strong>方法名</strong>：是方法的实际名称。方法名和修饰符共同构成方法签名。</li><li><strong>参数类型</strong>：参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或者变量。参数列表时指方法的参数类型、顺序和参数的个数。参数时可选的，方法可以不包含任何参数。<ul><li>形式参数：在方法被调用时用于接收外界输入的数据。</li><li>实参：调用方法时实际传给方法的数据。</li></ul></li><li><strong>方法体</strong>：方法体包含具体的语句，定义该方法的功能。</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数类型 参数名<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//方法体</span>  <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实例：比大小</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两个值相等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//终止方法</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自学笔记 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记3-流程控制</title>
      <link href="/2021/07/09/java-xue-xi-bi-ji-3-liu-cheng-kong-zhi/"/>
      <url>/2021/07/09/java-xue-xi-bi-ji-3-liu-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<p>自用的学习笔记，若有错误欢迎指出。</p><h2 id="java包机制"><a href="#java包机制" class="headerlink" title="java包机制"></a>java包机制</h2><p>为了更好地组织类，java提供了包机制，用于区别类名的命名空间。</p><p>包语句的语法格式为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pkg1</span><span class="token punctuation">[</span><span class="token punctuation">.</span>pkg2<span class="token punctuation">[</span><span class="token punctuation">.</span>pkg3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>一般利用公司域名倒序来作为包名字。</strong>例如：<code>www.baidu.com</code>，如果要建包的话：<code>com.baidu.www</code>这样来命名。</p><h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><p>当我们需要调用一些函数或者某一个包的成员的时候，我们需要在java程序中明确的导入该包。使用<code>import</code>关键字来实现包导入。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">package1</span><span class="token punctuation">[</span><span class="token punctuation">.</span>package2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>classname<span class="token operator">|</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用<code>*</code>来导入这个包下面的所有类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>shadowprism<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h2><ul><li><code>javadoc</code>命令是用来生成自己的API文档的。</li><li>参数信息<ul><li><code>@author</code> 作者名</li><li><code>@version</code> 版本号</li><li><code>@since</code> 指明需要最早使用的JDK版本</li><li><code>@param</code> 参数名</li><li><code>@return</code> 返回值情况</li><li><code>@throws</code> 异常抛出情况</li></ul></li></ul><p>文档注释可以给类加注释的同时也可以给方法加注释。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>shadowprism<span class="token punctuation">.</span>base</span><span class="token punctuation">;</span><span class="token comment">/** * @author shadowprism * @version 1.0 * @since 1.8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Doc</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token comment">/**     * @param name     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用cmd在java文件目录下生成JavaDoc文档。</p><ol><li>使用<code>cd /d F:你的文件\你的文件</code>来定位到你的文件位置</li><li>在java文件目录下输入<code>javadoc -encoding UTF-8 -charset UTF-8 Doc.java</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用-encoding UTF-8 -charset UTF-8是为了防止文章出现乱码</span>javadoc -encoding UTF-8 -charset UTF-8 Doc.java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>**有待解决的问题：</p><ul><li>在cmd中输入的<code>javadoc</code>输出结果为“不是内部指令…”，但是在<code>jdk</code>的<code>bin</code>目录下却可以运行<code>javadoc -help</code>。</li></ul><h2 id="java流程控制"><a href="#java流程控制" class="headerlink" title="java流程控制"></a>java流程控制</h2><h3 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h3><p>java提供的一个工具类，我们可以获取用户的输入。<code>java.util.Scanner</code>是Java5的新特征，我们可以通过<code>Scanner</code>类来获取用户的输入。</p><p>基本语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过<code>Scanner</code>类的<code>next()</code>于<code>nextLine()</code>方法获取输入的字符串，在读取前我们一般需要使用<code>hasNext()</code>与<code>hasNextLine()</code>判断是否还有输入的数据。</p><p>实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个扫描器对象来接收键盘数据</span>        <span class="token class-name">Scanner</span> scan01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scan02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用next方式来接收: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断用户有没有输入字符串</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scan01<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> scan01<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的内容为："</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用nextLine方式来接收: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> scan02<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的内容为："</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//凡是属于IO流的类如果不关闭会一直暂用资源，建议用掉就关闭</span>        scan01<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scan02<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>在<code>hasNext()</code>方法中，如果输入的内容为<code>hello world</code>这样带中间带空格的字符串，最终结果只会输出为<code>hello</code>。需要使用<code>hasNextLine()</code>方法。</p><ul><li><code>next():</code><ul><li>一定要读取到有效字符后才可以结束输入</li><li>对输入有效字符之前遇到的空白，<code>next()</code>方法会自动将其去掉</li><li>只有输入有效字符后才将其后面的空白作为分隔符或者结束符</li><li><code>next()</code>不能得到带有空格的字符串</li></ul></li><li><code>nextLine():</code><ul><li>以回车键ENTER为结束符，也就是说<code>nextLine()</code>方法返回的是输入回车之前的所有字符</li><li>可以获得空白</li></ul></li></ul><h3 id="Scanner进阶"><a href="#Scanner进阶" class="headerlink" title="Scanner进阶"></a>Scanner进阶</h3><p>实例：我们可以输入多个数字，并且求其总和和平均数，每输入一个数字用ENTER键确认。如果输入了非数字就表示我们要结束输入，执行输出结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Scanner</span> scanner01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//求和</span>        <span class="token keyword">double</span> average <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//平均数</span>        <span class="token keyword">int</span> inputNumTimes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//计算输入多少个数字</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数字："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner01<span class="token punctuation">.</span><span class="token function">hasNextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">double</span> d <span class="token operator">=</span> scanner01<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            inputNumTimes<span class="token operator">++</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> d<span class="token punctuation">;</span> <span class="token comment">//求和</span>        <span class="token punctuation">&#125;</span>        average <span class="token operator">=</span> sum <span class="token operator">/</span> inputNumTimes<span class="token punctuation">;</span> <span class="token comment">//计算平均数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"求和结果为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均数为："</span> <span class="token operator">+</span> average<span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner01<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结束进程</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><ul><li>java的基本结构就是顺序结构，除非特别指明，否则就按顺序一句一句执行。</li><li>顺序结构是最简单的算法结构。</li><li>语句与语句之间，框与框之间是按照从上到下的顺序进行的，它是由若干个依次执行的处理步骤组成的，它是任何一个算法都离不开的一种基本算法结构。</li></ul><h3 id="if选择结构"><a href="#if选择结构" class="headerlink" title="if选择结构"></a>if选择结构</h3><h4 id="if单选择结构"><a href="#if单选择结构" class="headerlink" title="if单选择结构"></a>if单选择结构</h4><p>我们很多时候需要去判断一个东西是否可行，然后我们才去执行，这样一个过程在程序中用<code>if</code>语句来表示。</p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//如果布尔表达式为true将执行语句</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Boy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="if双选择结构"><a href="#if双选择结构" class="headerlink" title="if双选择结构"></a>if双选择结构</h4><p>例子：如果一个公司需要收购软件，如果成功了就需要给别人支付100w。如果失败就选择自己开发软件。这样就需要有两个判断，需要一个双选择结构，所以就有了<code>if -else</code>结构。</p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//如果布尔表达式为true</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果布尔表达式为false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="if多选择结构"><a href="#if多选择结构" class="headerlink" title="if多选择结构"></a>if多选择结构</h4><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//如果布尔表达式1的值为true，执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果布尔表达式2值为true，执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果布尔表达式3值为true，执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果以上的布尔表达式都不为true,执行代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"满分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"优秀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">70</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"良"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="if嵌套结构"><a href="#if嵌套结构" class="headerlink" title="if嵌套结构"></a>if嵌套结构</h4><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//如果布尔表达式1的值为true，执行代码</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>布尔表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//如果布尔表达式2的值为true，执行代码</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="switch多选择结构"><a href="#switch多选择结构" class="headerlink" title="switch多选择结构"></a>switch多选择结构</h3><p>多选择结构还有一个实现方式就是<code>switch case</code>语句。</p><p><code>switch case</code>语句判断一个变量与一个系列值中某个值是否相等，每一个值称为一个分支。</p><p><code>switch</code>语句中的变量类型可以是：</p><ul><li><code>byte</code>、<code>short</code>、<code>int</code>、或者<code>char</code></li><li>从JavaSE7才开始<code>switch</code>支持字符串<code>String</code>类型</li><li>同时<code>case</code>标签必须为字符串常量火字面量</li></ul><p>语句：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> value <span class="token operator">:</span>        <span class="token comment">//语句</span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选</span>    <span class="token keyword">case</span> value <span class="token operator">:</span>        <span class="token comment">//语句</span>        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选</span>    <span class="token comment">//可以有任意数量的case语句</span>    <span class="token keyword">default</span> <span class="token operator">:</span> <span class="token comment">//可选</span>        <span class="token comment">//语句</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> grade <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"优秀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'B'</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"良好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再接再厉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未知等级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>*如果不使用<code>break</code>的话，程序会一直运行到最后一个判断。</p><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ul><li><code>while</code>循环</li><li><code>do...while</code>循环</li><li><code>for</code>循环</li></ul><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p><code>while</code>循环是最基本的循环，它的结构为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//循环结构</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>只要布尔表达式为<code>true</code>，循环就会一直下去。</li><li><strong>我们大多数情况下是会让循环停止下来的，我们需要一个让表达式失效的方式来结束循环。</strong></li><li>少部分情况需要循环一直执行，比如服务器的请求响应监听等。</li></ul><h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h4><ul><li>对于<code>while</code>语句而言，如果不满足条件则不能进入循环。</li><li><code>do...while</code>循环至少会执行一次循环。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5050</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="For循环"><a href="#For循环" class="headerlink" title="For循环"></a>For循环</h4><ul><li><p><code>for</code>循环语句是支持迭代的一种通用结构，是最有效、最灵活的循环结构。</p></li><li><p><code>for</code>循环执行的次数是在执行前就确定的。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化<span class="token punctuation">;</span> 布尔表达式<span class="token punctuation">;</span> 更新<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//代码语句</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实例1：计算1-100之间的奇数和偶数的和</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> oddSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//初始化奇数和</span><span class="token keyword">int</span> evenSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//初始化偶数和</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        oddSum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        evenSum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奇数和为："</span> <span class="token operator">+</span> oddSum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2500</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"偶数和为："</span> <span class="token operator">+</span> evenSum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2450</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例2：用<code>while</code>或者<code>for</code>循环输出1-1000之间能被5整除的数，并且每行输出3个。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里的"\t"为转义字符</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">15</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例3：打印九九乘法表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="增强型for循环"><a href="#增强型for循环" class="headerlink" title="增强型for循环"></a>增强型<code>for</code>循环</h4><ul><li>在java5引入了一种主要用于或集合的增强型for循环</li><li>java增强型for循环语法格式如下：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>声明语句<span class="token operator">:</span> 表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//代码语句</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</li><li>表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</li></ul><h4 id="break-amp-continue"><a href="#break-amp-continue" class="headerlink" title="break &amp; continue"></a>break &amp; continue</h4><ul><li><code>break</code>：在任何循环语句的主题部分，均可用<code>break</code>来控制循环的流程，<code>break</code>用于强行退出循环，不执行循环中剩余的语句。(<code>break</code>语句在<code>switch</code>语句中也有使用)</li><li><code>continue</code>语句用于循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。</li></ul><h2 id="流程控制练习"><a href="#流程控制练习" class="headerlink" title="流程控制练习"></a>流程控制练习</h2><p>打印一个三角形</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span>###############<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印一个等边三角形</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第一步：打印等边三角形的左半边</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span>     <span class="token operator">*</span>    <span class="token operator">*</span><span class="token operator">*</span>   <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>  <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">//第二步：打印等边三角形的另一边</span><span class="token comment">//之前的不变</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//在此加入：</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出结果</span>     <span class="token operator">*</span>    <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>   <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>  <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">//其中等边三角形的右半边打印的是</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>之后，我也会继续学习java，继续更新博客。分享知识、结交朋友，感谢你的观看！</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>B站：<a href="https://www.bilibili.com/video/BV12J41137hu?p=30&share_source=copy_web">狂神说java</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自学笔记 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记2 - java基础</title>
      <link href="/2021/07/07/java-xue-xi-bi-ji-2-java-ji-chu/"/>
      <url>/2021/07/07/java-xue-xi-bi-ji-2-java-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>自用的学习笔记，若有错误欢迎指出。</p><h2 id="java关键字"><a href="#java关键字" class="headerlink" title="java关键字"></a>java关键字</h2><p>java所有的组成部分都需要名字。类名、变量名以及方法名都被称之为标识符。</p><p>以下的这些都是java的关键字，在命名的时候<strong>不能使用</strong>。</p><p><img src="/2021/07/07/java-xue-xi-bi-ji-2-java-ji-chu/java%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="java关键字"></p><h2 id="java命名注意点"><a href="#java命名注意点" class="headerlink" title="java命名注意点"></a>java命名注意点</h2><ul><li>所有的标识符都应该以字母(A-Z, a - z)、美元符$、或者下划线<code>_</code>开始。</li><li>首字符之后可以是字母(A-Z, a - z)、美元符$、或者下划线<code>_</code>的任意字符组合。</li><li><strong>不能使用关键字作为变量名或者方法名。</strong></li><li>标识符是<strong>大小写敏感</strong>的。</li></ul><h3 id="变量命名规范-important"><a href="#变量命名规范-important" class="headerlink" title="变量命名规范[important]"></a>变量命名规范[important]</h3><ul><li><p>所有的变量、方法、类名要做到：简洁明了</p></li><li><p>类成员变量：首字母小写和驼峰原则</p></li><li><p>局部变量：首字母小写和驼峰原则</p></li><li><p>常量：大写字母和下划线：MAX_VALUE</p></li><li><p>类名：首字母大写和驼峰原则</p></li><li><p>方法名：首字母小写和驼峰原则</p></li><li><p>合法标识符举例：</p><ul><li>age</li><li>$salary</li><li>_value</li><li>_1boy</li></ul></li><li><p>非法标识符举例：</p><ul><li>123abc</li><li>207somker</li><li>-salary</li><li>#boy</li></ul></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><p>java是一门强类型语言</p><ul><li>要求变量的使用严格规定，所有的变量都必须先定义后使用。</li></ul></li><li><p>java的数据类型分为两大类</p><ul><li>基本类型(primitive type)<ul><li>数值类型<ul><li>整数类型<ul><li>byte: 占1个字节范围：-128~127</li><li>short：占2个字节范围：-32768~32767</li><li>int：占4个字节范围：-2147483648~2147483647</li><li>long：占8个字节范围：略</li></ul></li><li>浮点类型<ul><li>float：占4个字节</li><li>double：占8个字节</li></ul></li><li>字符类型(char占8个字节)</li></ul></li><li>Boolean类型(占1位其值只有true &amp; false)</li></ul></li><li>引用类型(reference type)<ul><li>类</li><li>接口</li><li>数组</li></ul></li></ul></li></ul><hr><h3 id="整数类型于浮点类型"><a href="#整数类型于浮点类型" class="headerlink" title="整数类型于浮点类型"></a>整数类型于浮点类型</h3><ul><li><strong>进制</strong>：<ul><li>二进制：0b</li><li>十进制</li><li>八进制：0</li><li>十六进制：0x</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 整数类型扩展*/</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span> <span class="token comment">//八进制</span><span class="token keyword">int</span> i3 <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span> <span class="token comment">//十六进制</span><span class="token comment">//输出结果为</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 16</span><span class="token comment">/** 浮点类型扩展*/</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">0.1f</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>f <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token comment">//浮点数精度溢出</span><span class="token comment">//使用 BigDecimal 数学工具类来表示银行的业务。</span><span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">21313131313131313f</span><span class="token punctuation">;</span><span class="token keyword">float</span> f2 <span class="token operator">=</span> f1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>f1 <span class="token operator">==</span> f2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="字符类型扩展"><a href="#字符类型扩展" class="headerlink" title="字符类型扩展"></a>字符类型扩展</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 字符类型扩展*/</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token string">'M'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token string">'中'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 77</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 20013</span><span class="token comment">/** char类型会涉及到Unicode编码: U0000 - UFFFF* 2的16次方 2^16 = 65536*/</span><span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token string">'\u0079'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// y</span><span class="token comment">/* 转义字符 \t : 制表符 \n : 换行 详见：https://www.cnblogs.com/yaochc/p/4574910.html*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>由于Java是强类型语言，所以当需要进行某些运算的时候，需要用到类型转换。</p><p>运算中，不同类型的数据优先转化为同一类型，然后进行运算。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//低 -------------------------------------------> 高</span><span class="token keyword">byte</span><span class="token punctuation">,</span> <span class="token keyword">short</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">-></span> <span class="token keyword">int</span> <span class="token operator">-></span> <span class="token keyword">long</span> <span class="token operator">-></span> <span class="token keyword">float</span> <span class="token operator">-></span> <span class="token keyword">double</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意点：</strong></p><ol><li>不能对布尔值进行转换</li><li>不能把对象类型转换为不相干的类型</li><li>在把高容量转换为低容量的时候，需要强制转换</li><li>在转换的时候，可能出现内存溢出或者精度问题的出现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//强制转换 (类型)变量名 高->低</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//内存溢出</span><span class="token comment">//自动转换 低->高</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token keyword">double</span> num2 <span class="token operator">=</span> num1<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//128.0</span><span class="token comment">//强制转换造成的精度缺失</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">25.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//25</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">68.88</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-68</span><span class="token comment">//操作比较大的数的时候，要注意溢出问题</span><span class="token comment">//JDK7的新特性，数字直接可以用"_"下划线分割</span><span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">1_000_000_000</span><span class="token punctuation">;</span><span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">int</span> total <span class="token operator">=</span> money <span class="token operator">*</span> year<span class="token punctuation">;</span><span class="token keyword">long</span> total2 <span class="token operator">=</span> money <span class="token operator">*</span> year<span class="token punctuation">;</span> <span class="token comment">//由于默认是int类型，所以在数字转换以前就存在问题</span><span class="token keyword">long</span> total3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>money<span class="token punctuation">)</span> <span class="token operator">*</span> year<span class="token punctuation">;</span> <span class="token comment">//先把一个</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//内存溢出</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//内存溢出</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出结果正确</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="什么是字节"><a href="#什么是字节" class="headerlink" title="什么是字节"></a>什么是字节</h2><ul><li>位(bit)：是计算机内部数据最小单位。例：1100 1100是一个八位二进制数。</li><li>字节(byte)：是计算机中数据处理的基本单位，习惯上用大写B来表示。</li><li>1B(byte，字节) = 8bit(位)</li><li>字符：是指计算机中使用的字母、数字、字和符号。</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量就是可以变化的量。</p><p>java一种强类型语言，每个变量都必须先声明其类型。</p><p>java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//数据类型 变量名 = 值; 可以使用逗号来隔开声明多个同类型变量</span>type varName <span class="token punctuation">[</span><span class="token operator">=</span>value<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">,</span>varName<span class="token punctuation">[</span><span class="token operator">=</span>value<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>注意事项：</strong><ul><li>每个变量都有类型，类型可以是基本类型，也可以是引用类型。</li><li>变量名必须是合法的标识符。</li><li>变量声明是一条完整的语句，因此每一个声明都必须以分号<code>;</code>结束。</li></ul></li></ul><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><ul><li>类变量</li><li>实例变量</li><li>局部变量</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Variable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> allClicks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//类变量</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"HelloWorld!"</span><span class="token punctuation">;</span> <span class="token comment">//实例变量</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//局部变量</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例变量：从属于对象，如果不初始化，其初始值为0<br>布尔值的默认值为：false<br>除了基本类型，其余的默认值为null</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span><span class="token punctuation">&#123;</span>    <span class="token comment">//属性：变量</span>        <span class="token comment">//类变量</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> salary <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span>        <span class="token comment">//实例变量：从属于对象，如果不初始化，其初始值为0</span>    <span class="token comment">//布尔值的默认值为：false</span>    <span class="token comment">//除了基本类型，其余的默认值为null</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//局部变量：必须声明和初始化值</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出结果：10</span>                <span class="token comment">//变量类型 变量名字 = new Demo1();</span>        <span class="token class-name">Demo1</span> demo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出结果：0</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出结果：null</span>                <span class="token comment">//类变量 static</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出结果：2500.0</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//其他方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><strong>常量</strong>(Constant): 初始化(initialize)后不能再改变值，是不会变动的值。</p><p>所谓常量可以理解成一种特殊的变量，它的值被设定之后，在程序运行的过程中不允许被改变。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//final 常量名 = 值;</span><span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>常量名一般使用大写字符。</strong></p><h2 id="java运算符"><a href="#java运算符" class="headerlink" title="java运算符"></a>java运算符</h2><p><a href="https://www.runoob.com/java/java-operators.html?_t_t_t=0.3133259497117251">点这里到: 菜鸟教程-java运算符</a></p><p>计算机的最基本用途之一就是执行数学运算，作为一门计算机语言，Java也提供了一套丰富的运算符来操纵变量。我们可以把运算符分成以下几组：</p><ul><li>算术运算符</li><li>关系运算符</li><li>位运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>其他运算符</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//二元运算符</span><span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">123123123123L</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">short</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">byte</span> d <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">double</span> e <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出的值为long</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出的值为int</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出的值为int</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出的值为long</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">/</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出的值为double</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="自增自减：-、"><a href="#自增自减：-、" class="headerlink" title="自增自减：++ 、--"></a>自增自减：<code>++</code> 、<code>--</code></h3><p><code>a++</code>: 执行完这行代码之后，先赋值给<code>b</code>，然后再<strong>自增</strong></p><p><code>++a</code>: 执行这行代码<strong>之前</strong>，先<strong>自增</strong>，然后再给<code>c</code>赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//自增自减：`++` 、`--`</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span> <span class="token comment">// c = 5, a = 5</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token operator">++</span>c <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token operator">++</span>a <span class="token operator">+</span> a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// c = 6, b = 3, ++a = 6, a++ = 6</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7 (a++ 自增)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="幂运算"><a href="#幂运算" class="headerlink" title="幂运算"></a>幂运算</h3><p>幂运算可以使用java的工具类<code>Math</code>来运行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> pow <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2的3次方</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pow<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><code>&amp;&amp;</code>: 逻辑与(and)运算</li><li><code>||</code>: 逻辑或(or)运算</li><li><code>!</code>: 逻辑非(取反)运算</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">||</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">//短路运算</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> d <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p><a href="https://www.runoob.com/w3cnote/bit-operation.html">点这里到：菜鸟教程-位运算</a></p><p>从现代计算机中所有的数据二进制的形式存储在设备中。即 0、1 两种状态，计算机对二进制数据进行的运算(+、-、*、/)都是叫位运算，即将符号位共同参与运算的运算。</p><table><thead><tr><th align="left">符号</th><th align="left">描述</th><th align="left">运算规则</th></tr></thead><tbody><tr><td align="left"><code>&amp;</code></td><td align="left">与</td><td align="left">两个位都为1时，结果才为1</td></tr><tr><td align="left">|</td><td align="left">或</td><td align="left">两个位都为0是，结果才为0</td></tr><tr><td align="left"><code>^</code></td><td align="left">异或</td><td align="left">两个位相同为0，相异为1</td></tr><tr><td align="left"><code>~</code></td><td align="left">取反</td><td align="left">0变1，1变0</td></tr><tr><td align="left"><code>&lt;&lt;</code></td><td align="left">左移</td><td align="left">各二进位全部左移若干位，高位丢弃，低位补0</td></tr><tr><td align="left"><code>&gt;&gt;</code></td><td align="left">右移</td><td align="left">各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）</td></tr></tbody></table><hr><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">A <span class="token operator">=</span> 0011 <span class="token number">1100</span>B <span class="token operator">=</span> 0000 <span class="token number">1101</span><span class="token comment"># A &amp; B -> A与B</span>A <span class="token operator">&amp;</span> B <span class="token operator">=</span> 0000 <span class="token number">1100</span><span class="token comment"># A | B -> A或B</span>A <span class="token operator">|</span> B <span class="token operator">=</span> 0011 <span class="token number">1101</span><span class="token comment"># A ^ B -> A异或B</span>A ^ B <span class="token operator">=</span> 0011 0010<span class="token comment"># ~A -> 取反A</span>~A <span class="token operator">=</span> <span class="token number">1100</span> 0011<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考：在计算机运算<code>2 * 8</code>中，用什么方式效率最高？</p><ul><li>采用位运算是最快的。采用<code>&lt;&lt;</code>左移来实现。</li></ul><h3 id="字符串连接符"><a href="#字符串连接符" class="headerlink" title="字符串连接符"></a>字符串连接符</h3><p>在<code>+</code>的两边只要出现了<code>String</code>，就会把其他的字符都变成<code>String</code>类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果为：50</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果为：2030</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p><code>x ? y : z</code>这就是一个三元运算符。运行方式为：如果<code>x == ture</code> ，那么结果就为<code>y</code>，否则结果就为<code>z</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token class-name">String</span> grades <span class="token operator">=</span> score <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">?</span> <span class="token string">"不及格"</span> <span class="token operator">:</span> <span class="token string">"及格"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>grades<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出结果为：及格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在对照着视频把老师的知识点用博客这样的方式记录下来，这样不仅加深了这些知识的理解，同时也能更好的帮助我随时查阅。积少成多、聚沙成塔，只要坚持下来就没有什么搞不定的。</p><p>之后，我也会继续学习java，继续更新博客。分享知识、结交朋友，感谢你的观看！</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>B站：<a href="https://www.bilibili.com/video/BV12J41137hu?p=30&share_source=copy_web">狂神说java</a></p><p>菜鸟教程：<a href="https://www.runoob.com/java/java-operators.html?_t_t_t=0.3133259497117251">java运算符</a></p><p>菜鸟教程：<a href="https://www.runoob.com/w3cnote/bit-operation.html">位运算</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自学笔记 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记1 - java入门</title>
      <link href="/2021/07/07/java-xue-xi-bi-ji-1-java-ru-men/"/>
      <url>/2021/07/07/java-xue-xi-bi-ji-1-java-ru-men/</url>
      
        <content type="html"><![CDATA[<p>自用的学习笔记，若有错误欢迎指出。</p><h2 id="java的诞生"><a href="#java的诞生" class="headerlink" title="java的诞生"></a>java的诞生</h2><h3 id="C-amp-C"><a href="#C-amp-C" class="headerlink" title="C &amp; C++"></a>C &amp; C++</h3><ul><li>1972年C语言诞生<ul><li>贴近硬件，运行极快，效率极高。</li><li>操作系统，编译器，数据库，网络系统等等</li><li>指针和内存管理</li></ul></li><li>1982年C++诞生<ul><li>面向对象</li><li>兼容C</li><li>图形领域、游戏等等</li></ul></li></ul><h3 id="java初生"><a href="#java初生" class="headerlink" title="java初生"></a>java初生</h3><ul><li>设计理念：<ul><li>语法有点像C</li><li>没有指针</li><li>没有内存管理</li><li>真正的可移植性</li><li>面向对象</li><li>类型安全</li><li>高质量的类库</li></ul></li></ul><ul><li>由于1995年的互联网刚刚诞生，网页简单而且粗糙，缺乏互动性。</li><li>有人利用出java制作出图形界面的程序(Applet)，提高了用户体验，同时也吸引了很多商业巨头的眼光和好评。</li><li>java 2 标准版(J2SE): 桌面端</li><li>java 2 移动版(J2ME): 手机端</li><li>java 2 企业版(J2EE): 占领服务器</li><li>基于java开发了很多平台，系统，工具<ul><li>构建工具: Ant, Maven, Jekins</li><li>应用服务器: Tomcat, Jetty, Jboss, Websphere, weblogic</li><li>Web开发: Struts, Spring, Hibernate, myBatis</li><li>开发工具: Eclipse, Netbean, intellij idea, Jbuilder</li></ul></li><li>2006: Hadoop(大数据领域)</li><li>2008: Android(手机端)</li></ul><h2 id="java的特性和优势"><a href="#java的特性和优势" class="headerlink" title="java的特性和优势"></a>java的特性和优势</h2><ul><li>简单性</li><li>面向对象</li><li>可移植性</li><li>高性能</li><li>分布式</li><li>动态性</li><li>多线程</li><li>安全性</li><li>健壮性</li></ul><h2 id="java三大版本"><a href="#java三大版本" class="headerlink" title="java三大版本"></a>java三大版本</h2><ul><li>Write Once, Run Anywhere <ul><li>可移植性，JVM虚拟机来实现跨平台</li></ul></li><li>JavaSE: 标准版<ul><li>开发桌面程序，控制台开发</li></ul></li><li>JavaME: 嵌入式开发<ul><li>手机，小家电(现已不流行使用)</li></ul></li><li>JavaEE: E企业级开发<ul><li>web端，服务器开发</li></ul></li></ul><h2 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK, JRE, JVM"></a>JDK, JRE, JVM</h2><ul><li>JDK: Java Development Kit</li><li>JRE: Java Runtime Environment</li><li>JVM: Java Virtual Machine</li></ul><p>![JDK-JRE-JVM](./java学习笔记1 - java入门/JDK_JRE_JVM.png)</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自学笔记 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOS基本指令</title>
      <link href="/2021/07/07/dos-ji-ben-zhi-ling/"/>
      <url>/2021/07/07/dos-ji-ben-zhi-ling/</url>
      
        <content type="html"><![CDATA[<p>自用的学习笔记，若有错误欢迎指出。</p><h2 id="基本的DOS指令"><a href="#基本的DOS指令" class="headerlink" title="基本的DOS指令"></a>基本的DOS指令</h2><h3 id="开启DOS控制台的几种方式"><a href="#开启DOS控制台的几种方式" class="headerlink" title="开启DOS控制台的几种方式"></a>开启DOS控制台的几种方式</h3><p>打开cmd的方式</p><ol><li>使用开始菜单栏 —&gt; 系统 —&gt; 命令提示符;</li><li>win键 + R，输入<code>cmd</code>打开控制台(推荐使用);</li><li>在任意文件夹下面，按住shift键+鼠标右键点击，在此处命令行窗口;</li><li>资源管理器的地址栏前面输入<code>cmd</code>路径;</li><li>鼠标右键在第一种方法那里的命令提示符，选择”以管理员身份运行”，可以得到计算机的最高权限;</li></ol><h3 id="常用的DOS命令"><a href="#常用的DOS命令" class="headerlink" title="常用的DOS命令"></a>常用的DOS命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#盘符切换</span>E:<span class="token comment">#查看当前目录下的所有文件</span><span class="token function">dir</span><span class="token comment">#切换目录</span><span class="token builtin class-name">cd</span> /d F:<span class="token punctuation">\</span>study<span class="token punctuation">\</span>xxx<span class="token comment">#返回上一级</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token comment">#清理屏幕</span>cls<span class="token comment">#查看电脑的ip</span>ipconfig<span class="token comment">#打开应用</span>calc <span class="token comment">#计算器</span>notepad <span class="token comment">#记事本</span>mspaint <span class="token comment">#画图工具</span><span class="token comment">#ping 命令</span><span class="token function">ping</span> www.baidu.com<span class="token comment">#文件操作</span><span class="token comment">##新建文件</span>md <span class="token builtin class-name">test</span> <span class="token comment">#新建了一个名为"test"的文件夹</span>cd<span class="token operator">></span>a.txt <span class="token comment">#新建了一个"a.txt"文件</span><span class="token comment">##删除文件</span>del<span class="token operator">></span>a.txt <span class="token comment">#删除掉刚刚新建的"a.txt"文件</span>rd <span class="token builtin class-name">test</span> <span class="token comment">#删除掉刚刚新建的"test"的文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOS </tag>
            
            <tag> Typora </tag>
            
            <tag> 自学笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客的搭建以及学习历程</title>
      <link href="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/"/>
      <url>/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/</url>
      
        <content type="html"><![CDATA[<p>温故而知新，可以为师矣。</p><p>对我来说，搭建自己的个人博客不仅仅是为了自己的兴趣爱好。同时，写博客也可以很好的记录下自己成长的每一个脚印。我们往往在一路再向前赶路，却忘了放慢脚步。放慢脚步来反思自己的不足，明白自己为何跌倒。这样我们才可以走得更远。</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>这一次我们搭建的博客是需要使用：</p><ul><li>Git</li><li>Hexo</li><li>Node.js</li></ul><h3 id="下载并安装Node-js"><a href="#下载并安装Node-js" class="headerlink" title="下载并安装Node.js"></a>下载并安装Node.js</h3><p>其中，我们需要在Node.js的官网上面下载Node.js的安装包。</p><p><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/Node.js_phase01.png" alt="Node.js_phase01"></p><p>一般我们选择正式版，正式版还是最稳定的版本。(使用最新版本可能会与教程的步骤有所出入)</p><p>一般在安装过程中点击next键按照默认的设置来就行。安装路径按照自己喜好来就行。</p><p>使用cmd面板来测试Node.js是否有安装成功。使用win键+R键来呼出cmd面板。输入node -v命令行来查看我们所安装的node的版本。出现版本号就证明我们已经安装好了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node -v <span class="token comment">#查看node版本</span><span class="token function">npm</span> -v <span class="token comment">#查看npm版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/cmd_node -v&npm -v.png" alt="cmd_node -v&npm -v" style="zoom:80%;"><p>由于我们国内有墙*<del>你懂的</del>*,导致一些镜像源上下载的很慢。所以，我们还需要来利用npm来安装cnpm。这样可以加快下载速度。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>http://registry.npm.taobao.org <span class="token comment">#安装淘宝的cnpm 管理器</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>耐心的等待之后就可以下载完成。</p><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/cmd_hexo_deployer_git.png" alt="cmd_hexo_deployer_git" style="zoom:80%;"><p>当我们输入cnpm后，出现反馈就说明我们的cnpm也已经安装好了。</p><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/cmd_cnpm_check.png" alt="cmd_cnpm_check" style="zoom:80%;"><h3 id="安装Hexo框架"><a href="#安装Hexo框架" class="headerlink" title="安装Hexo框架"></a>安装Hexo框架</h3><p>我们终于可以下载并且安装Hexo框架了。</p><p>在控制台输入代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> -g hexo-cli <span class="token comment">#安装hexo框架</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/cmd_hexo_download.png" alt="cmd_hexo_download" style="zoom:80%;"><p>输入代码hexo -v来查看安装的hexo框架版本。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo -v <span class="token comment">#查看hexo版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/cmd_hexo_v.png" alt="cmd_hexo_v" style="zoom:80%;"><p>使用代码mkdir blog来创建blog目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> blog <span class="token comment">#创建blog目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/cmd_mkdir_blog.png" alt="cmd_mkdir_blog" style="zoom:80%;"><p>如图所示，我们已经在目录下成功创建了一个blog文件夹。</p><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/pc_mkdir_blog.png" alt="pc_mkdir_blog" style="zoom: 67%;"><p>这里我不想把我的博客文件装在C盘，我把文件装在F盘</p><p>具体指令需要查看cmd的常用指令集合。<a href="https://blog.csdn.net/qq_33862644/article/details/81171521">点击这里查看</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /d F:study <span class="token comment">#跳转到其他硬盘的其他文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/cmd_cd.png" alt="cmd_cd" style="zoom:80%;"><p>使用cd blog来进入blog的根目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog <span class="token comment">#进入blog目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/cmd_cd_blog.png" alt="cmd_cd_blog" style="zoom:80%;"><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><p>使用hexo init生成博客 初始化博客</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init <span class="token comment">#生成博客 初始化博客</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/cmd_hexo_init.png" alt="cmd_hexo_init" style="zoom:80%;"><p>随后我们就可以使用hexo s来启动博客的本地服务器，来正式的查看我们的网页了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s <span class="token comment">#启动本地博客服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/cmd_hexo_s.png" alt="cmd_hexo_s" style="zoom:80%;"><p>随后在网页上输入网页链接 <a href="http://localhost:4000/">http://localhost:4000</a> 来查看我们的博客网页。</p><p>如图所示，我们已经有了基本自带样式的博客网页，我们所做的从搭建环境到初始化博客已经全部做完了。接下来，就是开始创建新的博客内容以及将我们的博客托管到GitHub网页上。</p><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/web_hexo_blogpage.png" alt="web_hexo_blogpage" style="zoom:80%;"><h2 id="创建新的博客内容"><a href="#创建新的博客内容" class="headerlink" title="创建新的博客内容"></a>创建新的博客内容</h2><p>既然有了博客的基本框架，那么我就该把我们所想要分享的内容放到博客网页上去。具体的步骤如下：</p><p>使用命令行hexo n“这是博客文章名字”来创建新的博客内容。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo n <span class="token string">"这是博客文章名字"</span> <span class="token comment">#创建新的文章 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/cmd_hexo_n.png" alt="cmd_hexo_n" style="zoom:80%;"><p>接下来我们就可以使用文本编辑工具Markdown来编辑我们的博文。这里我也推荐给大家一款很好用的软件<a href="https://www.typora.io/">Typora</a>.</p><p>待我们编辑完博文之后，我们就该将新的博文发布我们的网页里面。</p><p>先清理一下，然后再生成博文。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo c <span class="token comment">#清理一下hexo g #生成</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/cmd_hexo_g.png" alt="cmd_hexo_g" style="zoom:80%;"><h2 id="将博客部署到GitHub上"><a href="#将博客部署到GitHub上" class="headerlink" title="将博客部署到GitHub上"></a>将博客部署到GitHub上</h2><p>我们的博客不可能只能在本地localhost上查看，我们需要将我们所想分享的东西放到网上去，让更多的人所了解。</p><p>首先我们要先登录到<a href="https://github.com/">GitHub</a>上。</p><p>登录之后我们点击”Your repositories”，在选择新建一个存储库。</p><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/web_github_newRe.png" alt="web_github_newRe" style="zoom:80%;"><p>然后我们一定要在对存储库命名的时候一定要是你的昵称比如我们的就是：MingFang310.github.io </p><p>然后我们点击create就好</p><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/web_github.png" alt="web_github" style="zoom:80%;"><p>【重要】随后我们需要在博客的目录下安装git的部署插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> --save hexo-deployer-git <span class="token comment">#在blog目录下安装git部署插件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/cmd_hexo_deployer_git.png" alt="cmd_hexo_deployer_git" style="zoom:80%;"><p>(我这边自己已经装过一遍了，初次安装的时候，等待一下就好)</p><p>同时我们也需要更改_config.yml文件的配置，这里我们用文本编辑器VSCode来打开该文件。</p><p>点击进去以后找到#Deployment并且修改代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/deployment.html</span>deploy:  type: <span class="token function">git</span> repo: https://github.com/YourGithubName/YourGithubName.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>网站链接为你在GitHub上创建的存储库的链接</p><p><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/vscode_change_deployment.png" alt="vscode_change_deployment"></p><p>最后一步，也就是使用命令行hexo d 对该博客部署到GitHub上面。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span class="token comment">#部署到远程Github仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后我们就可以直接用我们GitHub网页链接的后半段直接访问我们的博客了！</p><p><img src="/2021/07/05/ge-ren-bo-ke-de-da-jian-yi-ji-xue-xi-li-cheng/web_blog_link.png" alt="web_blog_link"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><p><a href="https://blog.csdn.net/xjm850552586/article/details/84101345">hexo引用本地图片无法显示:</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=15443300066182090076">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo:</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
